// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using portaBLe;

#nullable disable

namespace portaBLe.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20250617030917_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("portaBLe.Leaderboard", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<float>("AccRating")
                        .HasColumnType("REAL");

                    b.Property<float>("Average")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaAlpha")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaBeta")
                        .HasColumnType("REAL");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count80")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count95")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<float>("GoldStandard")
                        .HasColumnType("REAL");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mapper")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<float>("MaxScoreMult")
                        .HasColumnType("REAL");

                    b.Property<float>("Megametric")
                        .HasColumnType("REAL");

                    b.Property<float>("Megametric125")
                        .HasColumnType("REAL");

                    b.Property<float>("Megametric40")
                        .HasColumnType("REAL");

                    b.Property<float>("Megametric75")
                        .HasColumnType("REAL");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiersRatingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<float>("PPRatioFiltered")
                        .HasColumnType("REAL");

                    b.Property<float>("PPRatioUnfiltered")
                        .HasColumnType("REAL");

                    b.Property<float>("PassRating")
                        .HasColumnType("REAL");

                    b.Property<float>("Percentile")
                        .HasColumnType("REAL");

                    b.Property<float>("PredictedAcc")
                        .HasColumnType("REAL");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<float>("Stars")
                        .HasColumnType("REAL");

                    b.Property<float>("TechRating")
                        .HasColumnType("REAL");

                    b.Property<float>("Top250")
                        .HasColumnType("REAL");

                    b.Property<float>("TopPp")
                        .HasColumnType("REAL");

                    b.Property<float>("TotalPP")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ModifiersRatingId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("portaBLe.ModifiersRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("FSAccRating")
                        .HasColumnType("REAL");

                    b.Property<float>("FSPassRating")
                        .HasColumnType("REAL");

                    b.Property<float>("FSPredictedAcc")
                        .HasColumnType("REAL");

                    b.Property<float>("FSStars")
                        .HasColumnType("REAL");

                    b.Property<float>("FSTechRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SFAccRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SFPassRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SFPredictedAcc")
                        .HasColumnType("REAL");

                    b.Property<float>("SFStars")
                        .HasColumnType("REAL");

                    b.Property<float>("SFTechRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SSAccRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SSPassRating")
                        .HasColumnType("REAL");

                    b.Property<float>("SSPredictedAcc")
                        .HasColumnType("REAL");

                    b.Property<float>("SSStars")
                        .HasColumnType("REAL");

                    b.Property<float>("SSTechRating")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ModifiersRating");
                });

            modelBuilder.Entity("portaBLe.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<float>("AccPp")
                        .HasColumnType("REAL");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<float>("PassPp")
                        .HasColumnType("REAL");

                    b.Property<float>("Pp")
                        .HasColumnType("REAL");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RankedPlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Skill")
                        .HasColumnType("REAL");

                    b.Property<float>("TechPp")
                        .HasColumnType("REAL");

                    b.Property<float>("TopPp")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("portaBLe.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AccPP")
                        .HasColumnType("REAL");

                    b.Property<float>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<float>("BonusPp")
                        .HasColumnType("REAL");

                    b.Property<bool>("FC")
                        .HasColumnType("INTEGER");

                    b.Property<float>("FCAcc")
                        .HasColumnType("REAL");

                    b.Property<string>("LeaderboardId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("PassPP")
                        .HasColumnType("REAL");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<float>("Pp")
                        .HasColumnType("REAL");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Skill")
                        .HasColumnType("REAL");

                    b.Property<float>("TechPP")
                        .HasColumnType("REAL");

                    b.Property<int>("Timepost")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("portaBLe.Leaderboard", b =>
                {
                    b.HasOne("portaBLe.ModifiersRating", "ModifiersRating")
                        .WithMany()
                        .HasForeignKey("ModifiersRatingId");

                    b.Navigation("ModifiersRating");
                });

            modelBuilder.Entity("portaBLe.Score", b =>
                {
                    b.HasOne("portaBLe.Leaderboard", "Leaderboard")
                        .WithMany("Scores")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portaBLe.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("portaBLe.Leaderboard", b =>
                {
                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
